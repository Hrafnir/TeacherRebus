/* Version: #1 (PoC) */

// === GLOBALE VARIABLER ===
let map;
let currentMapMarker;
let userPositionMarker;
let mapElement; 
let currentTeamData = null; 
let audioContext; 
let proximityBeepIntervalId = null; 
let isGpsAudioEnabled = false;
let gpsAudioVolume = 0.7; 
let mapPositionWatchId = null;   
let previousDistanceToTarget = null;
let finishMarker = null;
let hasPlayedTargetReachedSound = false;

// === GLOBAL KONFIGURASJON ===
const TOTAL_POSTS = 2; // ENDRET TIL 2

// OPPDATERTE POST_LOCATIONS MED DINE POC-KOORDINATER OG BESKRIVELSER
const POST_LOCATIONS = [ 
    { lat: 60.81260478331276, lng: 10.673852939210269, title: "PoC Post 1", name: "Demonstrasjonssted Alfa"},
    { lat: 60.81256884286532, lng: 10.673637903646759, title: "PoC Post 2", name: "Demonstrasjonssted Beta"}
];
// Juster START_LOCATION til √• v√¶re n√¶r dine PoC-poster for en bedre demo
const START_LOCATION = { lat: 60.8127, lng: 10.6737, title: "Start Demo-Rebus" }; 
// FINISH_LOCATION kan v√¶re den siste posten, eller et annet definert m√•l for PoC
const FINISH_LOCATION = { lat: 60.8125, lng: 10.6735, title: "M√•l Demo" }; 

// === GOOGLE MAPS API CALLBACK ===
window.initMap = function() { 
    mapElement = document.getElementById('dynamic-map-container'); 
    if (!mapElement) { setTimeout(window.initMap, 500); return; }
    const mapStyles = [ { featureType: "all", elementType: "labels", stylers: [{ visibility: "off" }] } ];
    map = new google.maps.Map(mapElement, {
        center: START_LOCATION, zoom: 18, // Litt mer zoom for n√¶rliggende poster
        mapTypeId: google.maps.MapTypeId.SATELLITE, 
        styles: mapStyles, 
        disableDefaultUI: false, streetViewControl: false, fullscreenControl: true,
        mapTypeControlOptions: { style: google.maps.MapTypeControlStyle.DROPDOWN_MENU, mapTypeIds: [google.maps.MapTypeId.SATELLITE, google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.HYBRID] }
    });
    new google.maps.Marker({ position: START_LOCATION, map: map, title: START_LOCATION.title });
    // M√•lmark√∏r vises kun n√•r alle PoC-poster er l√∏st
    
    if (currentTeamData && currentTeamData.completedPostsCount < TOTAL_POSTS) { 
        const currentPostGlobalId = currentTeamData.postSequence[currentTeamData.currentPostArrayIndex];
        updateMapMarker(currentPostGlobalId, false); 
    } else if (currentTeamData && currentTeamData.completedPostsCount >= TOTAL_POSTS) { 
        updateMapMarker(null, true); 
    }
    if (currentTeamData || isGpsAudioEnabled) { 
        startContinuousUserPositionUpdate();
    }
    console.log("PoC Google Map initialisert");
}

// === GLOBALE KARTFUNKSJONER ===
// ... (updateMapMarker, clearMapMarker, clearFinishMarker, handleGeolocationError som i versjon #23) ...
function updateMapMarker(postGlobalId, isFinalTarget = false) { if (!map) { console.warn("Kart ikke initialisert for updateMapMarker."); return; } clearMapMarker(); clearFinishMarker(); let location; let markerTitle; let markerIconUrl; if (isFinalTarget) { location = FINISH_LOCATION; markerTitle = FINISH_LOCATION.title; markerIconUrl = 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png'; finishMarker = new google.maps.Marker({ position: { lat: location.lat, lng: location.lng }, map: map, title: markerTitle, animation: google.maps.Animation.DROP, icon: { url: markerIconUrl } }); } else { if (!postGlobalId || postGlobalId < 1 || postGlobalId > POST_LOCATIONS.length) { return; } location = POST_LOCATIONS[postGlobalId - 1]; markerTitle = `Neste: ${location.name || location.title}`; markerIconUrl = 'https://maps.google.com/mapfiles/ms/icons/red-dot.png'; currentMapMarker = new google.maps.Marker({ position: { lat: location.lat, lng: location.lng }, map: map, title: markerTitle, animation: google.maps.Animation.DROP, icon: { url: markerIconUrl } }); } if(location) { map.panTo({ lat: location.lat, lng: location.lng }); if (map.getZoom() < 18) map.setZoom(18); } } // √òkt zoom for PoC
function clearMapMarker() { if (currentMapMarker) { currentMapMarker.setMap(null); currentMapMarker = null; } }
function clearFinishMarker() { if (finishMarker) { finishMarker.setMap(null); finishMarker = null; } }
function handleGeolocationError(error) { let msg = "Posisjonsfeil: "; switch (error.code) { case error.PERMISSION_DENIED: msg += "Nektet."; break; case error.POSITION_UNAVAILABLE: msg += "Utilgjengelig."; break; case error.TIMEOUT: msg += "Timeout."; break; default: msg += "Ukjent."; } console.warn(msg); }


// === GPS AUDIO HJELP & KARTPOSISJON FUNKSJONER ===
// ... (initializeAudioContext, playSound, playTargetReachedChime, calculateDistance, updateUserPositionOnMap, handlePositionUpdate, updateProximitySoundLogic, startContinuousUserPositionUpdate, stopContinuousUserPositionUpdate som i versjon #22) ...
function initializeAudioContext() { if (!audioContext) { audioContext = new (window.AudioContext || window.webkitAudioContext)(); } }
function playSound(frequency, duration, volume, type = 'sine', startTimeOffset = 0) { if (!audioContext || !isGpsAudioEnabled) return; const oscillator = audioContext.createOscillator(); const gainNode = audioContext.createGain(); oscillator.connect(gainNode); gainNode.connect(audioContext.destination); oscillator.type = type; oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime + startTimeOffset / 1000); const actualVolume = document.getElementById('gps-audio-volume-slider') ? document.getElementById('gps-audio-volume-slider').valueAsNumber : volume; gainNode.gain.setValueAtTime(actualVolume * 0.4, audioContext.currentTime + startTimeOffset / 1000); oscillator.start(audioContext.currentTime + startTimeOffset / 1000); oscillator.stop(audioContext.currentTime + (startTimeOffset + duration) / 1000); }
function playTargetReachedChime() { if (!audioContext || !isGpsAudioEnabled) return; const vol = gpsAudioVolumeSlider ? gpsAudioVolumeSlider.valueAsNumber : gpsAudioVolume; playSound(523.25, 150, vol, 'triangle', 0); playSound(659.25, 150, vol, 'triangle', 150); playSound(783.99, 200, vol, 'triangle', 300); let delay = 550; for (let i = 0; i < 5; i++) { playSound(1200, 80, vol, 'sine', delay + i * 120); } }
function calculateDistance(lat1, lon1, lat2, lon2) { const R = 6371e3; const œÜ1 = lat1 * Math.PI/180; const œÜ2 = lat2 * Math.PI/180; const ŒîœÜ = (lat2-lat1) * Math.PI/180; const ŒîŒª = (lon2-lon1) * Math.PI/180; const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) + Math.cos(œÜ1) * Math.cos(œÜ2) * Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2); const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); return R * c; }
function updateUserPositionOnMap(position) { if (!map) return; const userPos = { lat: position.coords.latitude, lng: position.coords.longitude }; if (userPositionMarker) { userPositionMarker.setPosition(userPos); } else { userPositionMarker = new google.maps.Marker({ position: userPos, map: map, title: "Din Posisjon", icon: { path: google.maps.SymbolPath.CIRCLE, scale: 7, fillColor: "#1976D2", fillOpacity: 1, strokeWeight: 2, strokeColor: "white" } }); } }
function handlePositionUpdate(position) { updateUserPositionOnMap(position); if (isGpsAudioEnabled) { updateProximitySoundLogic(position); } }
function updateProximitySoundLogic(position) { if (!currentTeamData || currentTeamData.completedPostsCount >= TOTAL_POSTS) { if (proximityBeepIntervalId) clearInterval(proximityBeepIntervalId); proximityBeepIntervalId = null; previousDistanceToTarget = null; hasPlayedTargetReachedSound = true; return; } const userLat = position.coords.latitude; const userLng = position.coords.longitude; const nextPostIndexInSequence = currentTeamData.currentPostArrayIndex; if (nextPostIndexInSequence >= currentTeamData.postSequence.length) { if (proximityBeepIntervalId) clearInterval(proximityBeepIntervalId); proximityBeepIntervalId = null; previousDistanceToTarget = null; return; } const nextPostGlobalId = currentTeamData.postSequence[nextPostIndexInSequence]; if (nextPostGlobalId === undefined || nextPostGlobalId < 1 || nextPostGlobalId > POST_LOCATIONS.length) { if (proximityBeepIntervalId) clearInterval(proximityBeepIntervalId); proximityBeepIntervalId = null; previousDistanceToTarget = null; return; } const targetLocation = POST_LOCATIONS[nextPostGlobalId - 1]; const currentDistance = calculateDistance(userLat, userLng, targetLocation.lat, targetLocation.lng); console.log(`Avstand til PoC Post ${nextPostGlobalId} (${targetLocation.name}): ${currentDistance.toFixed(0)}m`); const gpsVol = gpsAudioVolumeSlider ? gpsAudioVolumeSlider.valueAsNumber : gpsAudioVolume; if (currentDistance <= 5) { if (!hasPlayedTargetReachedSound) { console.log("Innenfor 5 meter! Spiller trudelutt."); playTargetReachedChime(); hasPlayedTargetReachedSound = true; } previousDistanceToTarget = currentDistance; if (proximityBeepIntervalId) { clearInterval(proximityBeepIntervalId); proximityBeepIntervalId = null; } return; } else { if (hasPlayedTargetReachedSound && currentDistance > 6) { hasPlayedTargetReachedSound = false; } } if (proximityBeepIntervalId) { clearInterval(proximityBeepIntervalId); proximityBeepIntervalId = null; } if (previousDistanceToTarget !== null && currentDistance > 5) { const distanceChangeThreshold = 1; if (currentDistance < previousDistanceToTarget - distanceChangeThreshold) { console.log("N√¶rmere!"); playSound(1000, 80, gpsVol, 'sawtooth', 0); playSound(1000, 80, gpsVol, 'sawtooth', 120); } else if (currentDistance > previousDistanceToTarget + distanceChangeThreshold) { console.log("Lenger unna!"); playSound(400, 250, gpsVol, 'square'); } } previousDistanceToTarget = currentDistance; }
function startContinuousUserPositionUpdate() { const toggleGpsAudioButton = document.getElementById('toggle-gps-audio-button'); if (!navigator.geolocation) { console.warn("Geolocation ikke st√∏ttet."); isGpsAudioEnabled = false; if(toggleGpsAudioButton) toggleGpsAudioButton.textContent = "üõ∞Ô∏è GPS Av"; localStorage.setItem('rebusGpsAudioEnabled', false); return; } if (mapPositionWatchId !== null) return; initializeAudioContext(); console.log("Starter kontinuerlig GPS posisjonssporing for kart og pip."); previousDistanceToTarget = null; mapPositionWatchId = navigator.geolocation.watchPosition( handlePositionUpdate, (error) => { handleGeolocationError(error); stopContinuousUserPositionUpdate(); if(toggleGpsAudioButton) toggleGpsAudioButton.textContent = "üõ∞Ô∏è GPS Feil"; isGpsAudioEnabled = false; localStorage.setItem('rebusGpsAudioEnabled', false); }, { enableHighAccuracy: true, maximumAge: 3000, timeout: 7000 } ); }
function stopContinuousUserPositionUpdate() { if (proximityBeepIntervalId) { clearInterval(proximityBeepIntervalId); proximityBeepIntervalId = null; } if (mapPositionWatchId !== null) { navigator.geolocation.clearWatch(mapPositionWatchId); mapPositionWatchId = null; console.log("Stoppet kontinuerlig GPS sporing for kart og pip."); } previousDistanceToTarget = null; hasPlayedTargetReachedSound = false; }


document.addEventListener('DOMContentLoaded', () => {
    const teamCodeInput = document.getElementById('team-code-input');
    const startWithTeamCodeButton = document.getElementById('start-with-team-code-button');
    const teamCodeFeedback = document.getElementById('team-code-feedback');
    const pages = document.querySelectorAll('#rebus-content .page');
    const unlockPostButtons = document.querySelectorAll('.unlock-post-btn');
    const checkTaskButtons = document.querySelectorAll('.check-task-btn');
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    const devResetButtons = document.querySelectorAll('.dev-reset-button');
    const backgroundAudio = document.getElementById('background-audio');
    const playPauseButton = document.getElementById('play-pause-button');
    const muteUnmuteButton = document.getElementById('mute-unmute-button');
    const volumeSlider = document.getElementById('volume-slider');
    const toggleGpsAudioButton = document.getElementById('toggle-gps-audio-button');
    const gpsAudioVolumeSlider = document.getElementById('gps-audio-volume-slider');
    
    // POC TEAM CONFIG - Kun 2 grupper, begge g√•r gjennom post 1 -> 2
    const TEAM_CONFIG = {
        "GRUPPEA": { name: "Demo Gruppe Alfa", startPostId: "post-1-page", postSequence: [1, 2] },
        "GRUPPEB": { name: "Demo Gruppe Bravo", startPostId: "post-1-page", postSequence: [1, 2] } 
        // For √• demonstrere ulik start, kan en gruppe starte p√• post 2:
        // "GRUPPEB": { name: "Demo Gruppe Bravo", startPostId: "post-2-page", postSequence: [2, 1] } 
    };
    // POC ANKOMSTKODER
    const POST_UNLOCK_CODES = {
        post1: "ALPHA", 
        post2: "BETA"  
    };
    // POC OPPGAVESVAR
    const CORRECT_TASK_ANSWERS = {
        post1: "PIANO",     // Svar p√• "Hva har n√∏kler, men kan ikke √•pne d√∏rer?"
        post2: "VELKOMMEN"  // Eksempel, m√• tilpasses hva som faktisk st√•r p√• en tavle
    };

    // === KJERNEFUNKSJONER (DOM-avhengige) ===
    // ... (setupGpsAudioControls, setupMusicControls, updatePageText, showRebusPage, showTabContent, saveState, loadState, clearState, resetPageUI, resetAllPostUIs, initializeTeam, handlePostUnlock, handleTaskCheck, updateUIAfterLoad som i versjon #23, men tilpasset TOTAL_POSTS = 2)
    function setupGpsAudioControls() { if (!toggleGpsAudioButton || !gpsAudioVolumeSlider) { console.warn("GPS lydkontroll-elementer mangler."); const gpsControlsDiv = document.getElementById('gps-audio-controls'); if(gpsControlsDiv) gpsControlsDiv.style.display = 'none'; return; } const savedGpsAudioEnabled = localStorage.getItem('rebusGpsAudioEnabled') === 'true'; const savedGpsAudioVolume = localStorage.getItem('rebusGpsAudioVolume'); isGpsAudioEnabled = savedGpsAudioEnabled; if (savedGpsAudioVolume !== null) { gpsAudioVolume = parseFloat(savedGpsAudioVolume); gpsAudioVolumeSlider.value = gpsAudioVolume; } else { gpsAudioVolumeSlider.value = gpsAudioVolume; } toggleGpsAudioButton.textContent = isGpsAudioEnabled ? "üõ∞Ô∏è GPS P√•" : "üõ∞Ô∏è GPS Av"; if (isGpsAudioEnabled && currentTeamData && currentTeamData.completedPostsCount < TOTAL_POSTS) { startContinuousUserPositionUpdate(); } toggleGpsAudioButton.addEventListener('click', () => { isGpsAudioEnabled = !isGpsAudioEnabled; toggleGpsAudioButton.textContent = isGpsAudioEnabled ? "üõ∞Ô∏è GPS P√•" : "üõ∞Ô∏è GPS Av"; localStorage.setItem('rebusGpsAudioEnabled', isGpsAudioEnabled); if (isGpsAudioEnabled && currentTeamData && currentTeamData.completedPostsCount < TOTAL_POSTS) { startContinuousUserPositionUpdate(); } else { stopContinuousUserPositionUpdate(); } }); gpsAudioVolumeSlider.addEventListener('input', () => { gpsAudioVolume = gpsAudioVolumeSlider.valueAsNumber; localStorage.setItem('rebusGpsAudioVolume', gpsAudioVolume); }); }
    function setupMusicControls() { if (!backgroundAudio || !playPauseButton || !muteUnmuteButton || !volumeSlider) { console.warn("Musikk-kontroll elementer mangler."); if(document.getElementById('music-controls')) document.getElementById('music-controls').style.display = 'none'; return; } const savedVolume = localStorage.getItem('rebusMusicVolume'); const savedMuted = localStorage.getItem('rebusMusicMuted') === 'true'; if (savedVolume !== null) { backgroundAudio.volume = parseFloat(savedVolume); volumeSlider.value = parseFloat(savedVolume); } else { backgroundAudio.volume = 0.5; volumeSlider.value = 0.5; } backgroundAudio.muted = savedMuted; muteUnmuteButton.textContent = savedMuted ? 'üîá' : 'üîä'; playPauseButton.addEventListener('click', () => { if (backgroundAudio.paused) { backgroundAudio.play().then(() => playPauseButton.textContent = '‚è∏Ô∏è').catch(e => console.error("Play feil:", e.name, e.message)); } else { backgroundAudio.pause(); playPauseButton.textContent = '‚ñ∂Ô∏è'; } }); muteUnmuteButton.addEventListener('click', () => { backgroundAudio.muted = !backgroundAudio.muted; muteUnmuteButton.textContent = backgroundAudio.muted ? 'üîá' : 'üîä'; localStorage.setItem('rebusMusicMuted', backgroundAudio.muted); }); volumeSlider.addEventListener('input', () => { backgroundAudio.volume = volumeSlider.value; localStorage.setItem('rebusMusicVolume', volumeSlider.value); if (backgroundAudio.muted && backgroundAudio.volume > 0) { backgroundAudio.muted = false; muteUnmuteButton.textContent = 'üîä'; localStorage.setItem('rebusMusicMuted', false); } }); backgroundAudio.load(); backgroundAudio.addEventListener('canplaythrough', () => { console.log("Musikk kan spilles."); if (backgroundAudio.paused) { backgroundAudio.play().then(() => { if (playPauseButton) playPauseButton.textContent = '‚è∏Ô∏è'; }).catch(e => { console.warn('Autoplay forhindret:', e.name, e.message); if (playPauseButton) playPauseButton.textContent = '‚ñ∂Ô∏è'; }); } }); backgroundAudio.addEventListener('error', (e) => { console.error("Audio feil:", backgroundAudio.error); if (playPauseButton) playPauseButton.textContent = '‚ö†Ô∏è'; let errText = "Feil med musikk."; if (backgroundAudio.error) { switch (backgroundAudio.error.code) { case 1: errText += " Avbrutt."; break; case 2: errText += " Nettverk."; break; case 3: errText += " Dekoding."; break; case 4: errText += " Format/kilde."; break; default: errText += " Ukjent."; } } console.error(errText); }); }
    function updatePageText(pageElement, teamPostNumber, globalPostId) { const titleElement = pageElement.querySelector('.post-title-placeholder'); const introElement = pageElement.querySelector('.post-intro-placeholder'); if (titleElement) { titleElement.textContent = `Gruppeoppgave ${teamPostNumber} av ${TOTAL_POSTS}`; } if (introElement) { const postDetails = POST_LOCATIONS[globalPostId -1]; let postName = postDetails ? postDetails.name : `Post ${globalPostId}`; introElement.textContent = `Velkommen til ${postName}. Finn ankomstkoden for √• l√•se opp oppgaven.`; if (teamPostNumber === TOTAL_POSTS) { if(titleElement) titleElement.textContent = `Siste Gruppeoppgave (${teamPostNumber} av ${TOTAL_POSTS})`; introElement.textContent = `Dette er siste oppgave f√∏r m√•lgang! Finn ankomstkoden ved ${postName}.`; } } }
    function showRebusPage(pageId) { pages.forEach(page => page.classList.remove('visible')); const nextPageElement = document.getElementById(pageId); if (nextPageElement) { nextPageElement.classList.add('visible'); const container = document.querySelector('.container'); if (container) window.scrollTo({ top: container.offsetTop - 20, behavior: 'smooth' }); if (currentTeamData && pageId.startsWith('post-')) { const globalPostNum = parseInt(pageId.split('-')[1]); const teamPostNum = currentTeamData.postSequence.indexOf(globalPostNum) + 1; updatePageText(nextPageElement, teamPostNum, globalPostNum); } resetPageUI(pageId); } else { console.error("Side ikke funnet:", pageId); clearState(); showRebusPage('intro-page'); } }
    function showTabContent(tabId) { tabContents.forEach(content => content.classList.remove('visible')); const nextContent = document.getElementById(tabId + '-content'); if (nextContent) nextContent.classList.add('visible'); else console.error("Tab-innhold ikke funnet:", tabId + '-content'); tabButtons.forEach(button => { button.classList.remove('active'); if (button.getAttribute('data-tab') === tabId) button.classList.add('active'); }); }
    function saveState() { if (currentTeamData) localStorage.setItem('activeTeamData', JSON.stringify(currentTeamData)); else localStorage.removeItem('activeTeamData'); }
    function loadState() { const savedData = localStorage.getItem('activeTeamData'); if (savedData) { try { currentTeamData = JSON.parse(savedData); if (!currentTeamData || typeof currentTeamData.completedPostsCount === 'undefined' || !currentTeamData.postSequence || !currentTeamData.unlockedPosts || currentTeamData.postSequence.length > TOTAL_POSTS ) { /* Sjekk om lagret sekvens er for lang for PoC */ clearState(); return false; } return true; } catch (e) { clearState(); return false; } } currentTeamData = null; return false; }
    function clearState() { localStorage.removeItem('activeTeamData'); currentTeamData = null; resetAllPostUIs(); clearMapMarker(); clearFinishMarker(); if (userPositionMarker) { userPositionMarker.setMap(null); userPositionMarker = null; } stopContinuousUserPositionUpdate(); }
    function resetPageUI(pageId) { if (pageId === 'intro-page' || pageId === 'finale-page') return; const postNumberMatch = pageId.match(/post-(\d+)-page/); if (!postNumberMatch) return; const postNum = postNumberMatch[1]; const unlockSection = document.querySelector(`#post-${postNum}-page .post-unlock-section`); const taskSection = document.querySelector(`#post-${postNum}-page .post-task-section`); const unlockInput = document.getElementById(`post-${postNum}-unlock-input`); const unlockButton = document.querySelector(`#post-${postNum}-page .unlock-post-btn`); const unlockFeedback = document.getElementById(`feedback-unlock-${postNum}`); const taskInput = document.getElementById(`post-${postNum}-task-input`); const taskButton = document.querySelector(`#post-${postNum}-page .check-task-btn`); const taskFeedback = document.getElementById(`feedback-task-${postNum}`); const isPostUnlocked = currentTeamData?.unlockedPosts?.[`post${postNum}`]; const isTaskCompleted = currentTeamData?.completedGlobalPosts?.[`post${postNum}`]; if (unlockSection && taskSection) { if (isTaskCompleted) { unlockSection.style.display = 'none'; taskSection.style.display = 'block'; if (taskInput) { taskInput.disabled = true; } if (taskButton) taskButton.disabled = true; if (taskFeedback) { taskFeedback.textContent = 'Oppgave fullf√∏rt!'; taskFeedback.className = 'feedback success'; } } else if (isPostUnlocked) { unlockSection.style.display = 'none'; taskSection.style.display = 'block'; if (taskInput) { taskInput.disabled = false; taskInput.value = ''; } if (taskButton) taskButton.disabled = false; if (taskFeedback) { taskFeedback.textContent = ''; taskFeedback.className = 'feedback'; } } else { unlockSection.style.display = 'block'; taskSection.style.display = 'none'; if (unlockInput) { unlockInput.disabled = false; unlockInput.value = ''; } if (unlockButton) unlockButton.disabled = false; if (unlockFeedback) { unlockFeedback.textContent = ''; unlockFeedback.className = 'feedback'; } } } }
    function resetAllPostUIs() { for (let i = 1; i <= TOTAL_POSTS; i++) { /* Kun for post 1 og 2 i PoC */ if (i > 2 && document.getElementById(`post-${i}-page`)) continue; const pageElement = document.getElementById(`post-${i}-page`); if (!pageElement) continue; const unlockSection = pageElement.querySelector('.post-unlock-section'); const taskSection = pageElement.querySelector('.post-task-section'); const unlockInput = document.getElementById(`post-${i}-unlock-input`); const unlockButton = pageElement.querySelector('.unlock-post-btn'); const unlockFeedback = document.getElementById(`feedback-unlock-${i}`); const taskInput = document.getElementById(`post-${i}-task-input`); const taskButton = pageElement.querySelector('.check-task-btn'); const taskFeedback = document.getElementById(`feedback-task-${i}`); if(unlockSection) unlockSection.style.display = 'block'; if(taskSection) taskSection.style.display = 'none'; if(unlockInput) { unlockInput.value = ''; unlockInput.disabled = false; } if(unlockButton) unlockButton.disabled = false; if(unlockFeedback) { unlockFeedback.textContent = ''; unlockFeedback.className = 'feedback'; } if(taskInput) { taskInput.value = ''; taskInput.disabled = false; } if(taskButton) taskButton.disabled = false; if(taskFeedback) { taskFeedback.textContent = ''; taskFeedback.className = 'feedback'; } const titlePlaceholder = pageElement.querySelector('.post-title-placeholder'); if(titlePlaceholder) titlePlaceholder.textContent = "Neste Post: Finn Ankomstkoden! üóùÔ∏è"; const introPlaceholder = pageElement.querySelector('.post-intro-placeholder'); if(introPlaceholder) introPlaceholder.textContent = "Finn ankomstkoden p√• stedet for √• l√•se opp oppgaven."; } if(teamCodeInput) teamCodeInput.value = ''; if(teamCodeFeedback) { teamCodeFeedback.textContent = ''; teamCodeFeedback.className = 'feedback';} }
    function initializeTeam(teamCode) { const teamKey = teamCode.trim().toUpperCase(); const config = TEAM_CONFIG[teamKey]; teamCodeFeedback.className = 'feedback'; teamCodeFeedback.textContent = ''; if (config) { currentTeamData = { ...config, id: teamKey, currentPostArrayIndex: 0, completedPostsCount: 0, completedGlobalPosts: {}, unlockedPosts: {} }; saveState(); resetAllPostUIs(); clearFinishMarker(); if (backgroundAudio && backgroundAudio.paused) { backgroundAudio.play().then(() => { if (playPauseButton) playPauseButton.textContent = '‚è∏Ô∏è'; }).catch(e => console.warn("Musikk auto-start feilet:", e.name, e.message)); } const firstPostInSequence = currentTeamData.postSequence[0]; showRebusPage(`post-${firstPostInSequence}-page`); if (map) updateMapMarker(firstPostInSequence, false); else console.warn("Kart ikke klart ved lagstart for √• sette mark√∏r."); startContinuousUserPositionUpdate(); console.log(`Team ${currentTeamData.name} startet! Deres ${currentTeamData.currentPostArrayIndex + 1}. post (globalt: ${firstPostInSequence})`); } else { teamCodeFeedback.textContent = 'Ugyldig gruppekode!'; teamCodeFeedback.classList.add('error', 'shake'); setTimeout(() => teamCodeFeedback.classList.remove('shake'), 400); if (teamCodeInput) { teamCodeInput.classList.add('shake'); setTimeout(() => teamCodeInput.classList.remove('shake'), 400); teamCodeInput.focus(); teamCodeInput.select(); } } }
    function handlePostUnlock(postNum, userAnswer) { const unlockInput = document.getElementById(`post-${postNum}-unlock-input`); const feedbackElement = document.getElementById(`feedback-unlock-${postNum}`); if (!currentTeamData) { console.error("currentTeamData er null i handlePostUnlock"); if (feedbackElement) { feedbackElement.textContent = 'Feil: Gruppe ikke startet.'; feedbackElement.className = 'feedback error';} return; } const correctUnlockCode = POST_UNLOCK_CODES[`post${postNum}`]; feedbackElement.className = 'feedback'; feedbackElement.textContent = ''; if (!userAnswer) { feedbackElement.textContent = 'Skriv ankomstkoden!'; feedbackElement.classList.add('error', 'shake'); unlockInput.classList.add('shake'); setTimeout(() => { feedbackElement.classList.remove('shake'); unlockInput.classList.remove('shake'); }, 400); return; } if (userAnswer === correctUnlockCode.toUpperCase() || userAnswer === '√ÖPNE') { feedbackElement.textContent = 'Post l√•st opp! Her er oppgaven:'; feedbackElement.classList.add('success'); if (unlockInput) unlockInput.disabled = true; document.querySelector(`#post-${postNum}-page .unlock-post-btn`).disabled = true; if (!currentTeamData.unlockedPosts) currentTeamData.unlockedPosts = {}; currentTeamData.unlockedPosts[`post${postNum}`] = true; saveState(); setTimeout(() => { resetPageUI(`post-${postNum}-page`); }, 800); } else { feedbackElement.textContent = 'Feil ankomstkode. Pr√∏v igjen!'; feedbackElement.classList.add('error', 'shake'); unlockInput.classList.add('shake'); setTimeout(() => { feedbackElement.classList.remove('shake'); unlockInput.classList.remove('shake'); }, 400); unlockInput.focus(); unlockInput.select(); } }
    function handleTaskCheck(postNum, userAnswer) { const taskInput = document.getElementById(`post-${postNum}-task-input`); const feedbackElement = document.getElementById(`feedback-task-${postNum}`); if (!currentTeamData) { console.error("currentTeamData er null i handleTaskCheck"); if(feedbackElement) {feedbackElement.textContent = 'Feil: Gruppe ikke startet.'; feedbackElement.className = 'feedback error';} return; } let correctTaskAnswer = CORRECT_TASK_ANSWERS[`post${postNum}`]; let alternativeAnswers = []; if (postNum === "2" && CORRECT_TASK_ANSWERS.post2 === "JACK BLACK") { alternativeAnswers.push("STEVE"); } feedbackElement.className = 'feedback'; feedbackElement.textContent = ''; if (!userAnswer) { feedbackElement.textContent = 'Svar p√• oppgaven!'; feedbackElement.classList.add('error', 'shake'); if(taskInput) taskInput.classList.add('shake'); setTimeout(() => { feedbackElement.classList.remove('shake'); if(taskInput) taskInput.classList.remove('shake'); }, 400); return; } const isCorrectMain = (userAnswer === correctTaskAnswer.toUpperCase()); const isCorrectAlternative = alternativeAnswers.some(alt => userAnswer === alt.toUpperCase()); const isFasit = (userAnswer === 'FASIT'); if (isCorrectMain || isCorrectAlternative || isFasit) { feedbackElement.textContent = isFasit ? 'FASIT godkjent!' : 'Korrekt svar!'; feedbackElement.classList.add('success'); if (taskInput) taskInput.disabled = true; const taskButton = document.querySelector(`#post-${postNum}-page .check-task-btn`); if(taskButton) taskButton.disabled = true; if (!currentTeamData.completedGlobalPosts[`post${postNum}`]) { currentTeamData.completedGlobalPosts[`post${postNum}`] = true; currentTeamData.completedPostsCount++; } currentTeamData.currentPostArrayIndex++; saveState(); hasPlayedTargetReachedSound = false; if (currentTeamData.completedPostsCount < TOTAL_POSTS) { if (currentTeamData.currentPostArrayIndex < currentTeamData.postSequence.length) { const nextPostGlobalId = currentTeamData.postSequence[currentTeamData.currentPostArrayIndex]; setTimeout(() => { showRebusPage(`post-${nextPostGlobalId}-page`); if (map) updateMapMarker(nextPostGlobalId, false); }, 1200); } else { console.warn("F√¶rre enn TOTAL_POSTS, men ingen flere i sekvens. Viser finale."); setTimeout(() => { showRebusPage('finale-page'); if (map) updateMapMarker(null, true); stopContinuousUserPositionUpdate(); }, 1200); } } else { setTimeout(() => { showRebusPage('finale-page'); if (map) updateMapMarker(null, true); stopContinuousUserPositionUpdate(); }, 1200); } } else { feedbackElement.textContent = 'Feil svar, pr√∏v igjen.'; feedbackElement.classList.add('error', 'shake'); if(taskInput) { taskInput.classList.add('shake'); setTimeout(() => { taskInput.classList.remove('shake'); }, 400); taskInput.focus(); taskInput.select(); } setTimeout(() => { feedbackElement.classList.remove('shake'); }, 400); } }
    function updateUIAfterLoad() { if (!currentTeamData) { resetAllPostUIs(); return; } for (let i = 1; i <= TOTAL_POSTS; i++) { if (document.getElementById(`post-${i}-page`)) resetPageUI(`post-${i}-page`); } }
    
    if (startWithTeamCodeButton) { startWithTeamCodeButton.addEventListener('click', () => { initializeTeam(teamCodeInput.value); }); } 
    if (teamCodeInput) { teamCodeInput.addEventListener('keypress', function(event) { if (event.key === 'Enter') { event.preventDefault(); if (startWithTeamCodeButton) startWithTeamCodeButton.click(); } }); }
    unlockPostButtons.forEach(button => { button.addEventListener('click', () => { const postNum = button.getAttribute('data-post'); const unlockInput = document.getElementById(`post-${postNum}-unlock-input`); handlePostUnlock(postNum, unlockInput.value.trim().toUpperCase()); }); });
    checkTaskButtons.forEach(button => { button.addEventListener('click', () => { const postNum = button.getAttribute('data-post'); const taskInput = document.getElementById(`post-${postNum}-task-input`); handleTaskCheck(postNum, taskInput.value.trim().toUpperCase()); }); });
    document.querySelectorAll('input[type="text"]').forEach(input => { input.addEventListener('keypress', function(event) { if (event.key === 'Enter') { event.preventDefault(); if (this.id === 'team-code-input') { if(startWithTeamCodeButton) startWithTeamCodeButton.click(); } else if (this.id.includes('-unlock-input')) { const postNum = this.id.split('-')[1]; const unlockButton = document.querySelector(`.unlock-post-btn[data-post="${postNum}"]`); if (unlockButton && !unlockButton.disabled) unlockButton.click(); } else if (this.id.includes('-task-input')) { const postNum = this.id.split('-')[1]; const taskButton = document.querySelector(`.check-task-btn[data-post="${postNum}"]`); if (taskButton && !taskButton.disabled) taskButton.click(); } } }); });
    tabButtons.forEach(button => { button.addEventListener('click', () => { const tabId = button.getAttribute('data-tab'); showTabContent(tabId); if (tabId === 'map' && map && currentTeamData) { if (currentTeamData.completedPostsCount < TOTAL_POSTS) { const currentPostGlobalId = currentTeamData.postSequence[currentTeamData.currentPostArrayIndex]; const postLocation = POST_LOCATIONS[currentPostGlobalId - 1]; let bounds = new google.maps.LatLngBounds(); if (postLocation) bounds.extend(postLocation); if (userPositionMarker && userPositionMarker.getPosition()) bounds.extend(userPositionMarker.getPosition()); if (!bounds.isEmpty()) { map.fitBounds(bounds); if (map.getZoom() > 18) map.setZoom(18); /* Justert zoom for PoC */ if (postLocation && (!userPositionMarker || !userPositionMarker.getPosition())) { map.panTo(postLocation); map.setZoom(18); } } else if (postLocation) { map.panTo(postLocation); map.setZoom(18); } } else { map.panTo(FINISH_LOCATION); map.setZoom(18); } } }); });
    devResetButtons.forEach(button => { button.addEventListener('click', () => { if (confirm("Nullstille demo?")) { clearState(); showRebusPage('intro-page'); if (teamCodeInput) { teamCodeInput.value = ''; teamCodeInput.disabled = false; } if (teamCodeFeedback) { teamCodeFeedback.textContent = ''; teamCodeFeedback.className = 'feedback'; } if (startWithTeamCodeButton) startWithTeamCodeButton.disabled = false; } }); });
    
    setupMusicControls(); 
    setupGpsAudioControls(); 
    if (loadState()) { 
        showTabContent('rebus');
        if (currentTeamData && currentTeamData.completedPostsCount >= TOTAL_POSTS) {
            showRebusPage('finale-page'); if (map) updateMapMarker(null, true); 
        } else if (currentTeamData) {
            const currentExpectedPostId = currentTeamData.postSequence[currentTeamData.currentPostArrayIndex];
            if (typeof currentExpectedPostId === 'undefined' || !document.getElementById(`post-${currentExpectedPostId}-page`)) { // Sjekk om postsiden finnes
                if(currentTeamData.completedPostsCount >= TOTAL_POSTS) { showRebusPage('finale-page'); if(map) updateMapMarker(null, true); }
                else { console.warn("Ugyldig post-ID i lagret state for PoC, nullstiller."); clearState(); showRebusPage('intro-page'); }
            } else {
                showRebusPage(`post-${currentExpectedPostId}-page`); 
            }
        } else { 
            clearState(); showRebusPage('intro-page');
        }
        updateUIAfterLoad(); 
        if(currentTeamData) {
            console.log(`Gjenopprettet tilstand for ${currentTeamData.name}.`);
            if (isGpsAudioEnabled && currentTeamData.completedPostsCount < TOTAL_POSTS && typeof google !== 'undefined' && google.maps && map) { 
                startContinuousUserPositionUpdate();
            }
        }
    } else {
        showTabContent('rebus'); showRebusPage('intro-page'); resetAllPostUIs(); 
    }

});
/* Version: #1 (PoC) */
